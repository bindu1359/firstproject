Tuple in data structures
=========================
1.tuple is exactle same as list except it is immuatable(we cannot change any values)
2.data is fixed and never changes then we should go for tuple
3.insertion order is preserved
4.duplicates are allowed
5.we can preserve insertion order we can differenitate duplicate objects by using index
6.tuple indicates ()(parentesis) or ,seperator

eg:-t=1,2,3
type(t)
<class 'tuple'>
a=(1,2,3)
type(a)
<class 'tuple'>

which of the following are valid tuples
=====================================
1.t=()
2.t=1,2,3,4,5,6
3.t=10
4.t=10,
5.t=(10,)
6.t=(1,2,3)


tuple creation
===============
1.t=()
creation of empty tuple

2.t=(10,)
creation of single valued tuple,parenthesis are optional,should ends with comma

3.t=1,2,3,4
creation of multi values tuples and parenthesis or optional

4.by using tuple()function
===========================
list=[1,2,3,4,5,6]
t=tuple(list)
t
(1, 2, 3, 4, 5, 6)

ex:-
t=tuple(range(0,10,2))
print(t)
(0, 2, 4, 6, 8)

Accessing elements of tuple
==========================

we can access either by using slice operator

1.by using index
================
ex:-
a=(1,2,3,4,5,6,7,7)
a[0]
1
a[2]
3
a[2]=900

2.by using slice opeartor
========================
a=(1,2,3,4,5,6,7)
a[1:5:2]
(2, 4)
a[5:1:-2]
(6, 4)
a[1:5:0]
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    a[1:5:0]
ValueError: slice step cannot be zero
a[:]
(1, 2, 3, 4, 5, 6, 7)
a[::-1]
(7, 6, 5, 4, 3, 2, 1)

mathematical operators from a tuple
=====================================
1.concatenation(+)
a=(1,2,3,4)
b=(1,2,3)
c=a+b
c
(1, 2, 3, 4, 1, 2, 3)

2.repetation(*)
ex:-
a=(1,2,3,4,5)
a*5

important functions of tuple
=============================
1.len()
length of the tuple
ex:-a=(1,2,3,4,5,6)
len(a)
2.count():- to return number of occurence of given elements in the tuple
ex:-
a=(1,1,1,2,3,4,5)
a.count(1)

3.index:- particular position we are find the index
ex:-
a=(1,2,3,4,5)
a.index(1)

4.sorted:-
the elements based on default sorting order
ex:-
a=(0,1,4,5,2,3)
b=sorted(a)
a
(0, 1, 4, 5, 2, 3)
b
[0, 1, 2, 3, 4, 5]


5.min and max elements
======================
ex:-
a=(1,2,3,4,5)
min(a)
1
max(a)
5

6.cmp
======
it compares both the elemnts of tuple
2.if the both the return equal it indicates 0
3.if the first tuple is less than second tuple then it return -1
4.if the first tuple is greater than second tuple it indicates +1

ex:-
a=(1,2,3,4,5)
b=(1,2,6,7,8)
c=(1,9,90,80)
print(cmp(a,b))
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    print(cmp(a,b))
NameError: name 'cmp' is not defined
print(a,b)
(1, 2, 3, 4, 5) (1, 2, 6, 7, 8)
print(a==b)
False
print(b==a)
False

in python function cmp is not avialable only in python2 not in python3

Tuple packing and unpacking
==========================
we can create tuple packing group of variables
ex:-
a=1
b=2
c=9
t=a,b,c
print(t)
(1, 2, 9)

tuple unpacking is reverse process of tuple packing we can unpack a tuple and it assign the
value in different variables

ex:-
a=(1,2,3,4,5,6)
g,b,c,d,e,f=a
print("g=",g,"b=",b,"c=",c,"d=",d,"e=",e,"f=",f)
g= 1 b= 2 c= 3 d= 4 e= 5 f= 6

wp to find take input number from keyboard and print its sum and average
=======================================================================
ex:-
t=eval(input("enter numbers"))
l=len(t)
sum=0
for i in t:
    sum=sum+i
print(sum)
print("average",sum/l)
